// Введите имя пользователя и пароль для подключения к WIFI
const char *ssid = "Wifi_name";
const char *password = "Wifi_password";

// Введите имя пользователя и пароль для подключения к AP.
const char *apssid = "esp32-cam";
const char *appassword = "12345678";  // Пароль AP должен содержать не менее 8 символов

#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "esp_camera.h"        // Видео
#include "soc/soc.h"           // Используется для предотвращения перезагрузки при нестабильном питании
#include "soc/rtc_cntl_reg.h"  // Используется для предотвращения перезагрузки при нестабильном питании
#include <TFT_eSPI.h>
#include <ESP32Servo.h>

String Feedback = "";                                                                                            // Возврат сообщения клиенту
String Command = "", cmd = "", P1 = "", P2 = "", P3 = "", P4 = "", P5 = "", P6 = "", P7 = "", P8 = "", P9 = "";  // Значение состояния разбора команды
byte ReceiveState = 0, cmdState = 1, strState = 1, questionstate = 0, equalstate = 0, semicolonstate = 0;

// ВНИМАНИЕ!!! Убедитесь, что вы выбрали модуль ESP32 Wrover,
//            или другую плату, которая имеет включенный PSRAM

// Настройка пинов модуля ESP32-CAM
#include "camera_pins.h"

// Инициализация дисплея ILI9488
TFT_eSPI tft = TFT_eSPI();
#define TFT_CS 15
#define TFT_RST 4
#define TFT_DC 2

WiFiServer server(80);
WiFiClient client;
Servo myServo;       // Создаём объект сервопривода
#define SERVO_PIN 4  // Можно сменить на 16, если 4 не работает

void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);  // Отключите настройку перезагрузки при нестабильном питании

  Serial.begin(115200);
  Serial.setDebugOutput(true);  // Включить вывод отладочной информации
  Serial.println();

  // Инициализация дисплея
  tft.init();
  tft.setRotation(1);
  tft.fillScreen(TFT_BLACK);

  // Настройка конфигурации видео
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;

  // Инициализация с высокими характеристиками для предварительного выделения больших буферов
  if (psramFound()) {
    config.frame_size = FRAMESIZE_UXGA;
    config.jpeg_quality = 10;  // 0-63, меньшее число означает более высокое качество
    config.fb_count = 2;
  } else {
    config.frame_size = FRAMESIZE_SVGA;
    config.jpeg_quality = 12;  // 0-63, меньшее число означает более высокое качество
    config.fb_count = 1;
  }

  // Инициализация камеры
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    delay(1000);
    ESP.restart();
  }

  // Установите разрешение для инициализации изображения
  sensor_t *s = esp_camera_sensor_get();
  s->set_framesize(s, FRAMESIZE_QVGA);  // UXGA|SXGA|XGA|SVGA|VGA|CIF|QVGA|HQVGA|QQVGA

  // Вспышка
  ledcAttach(4, 5000, 4);

  WiFi.mode(WIFI_AP_STA);  // Другие режимы WiFi.mode(WIFI_AP); WiFi.mode(WIFI_STA); WiFi.mode(WIFI_AP_STA);

  // Укажите статический IP-адрес для клиента
  // WiFi.config(IPAddress(192, 168, 201, 100), IPAddress(192, 168, 201, 2), IPAddress(255, 255, 255, 0));

  for (int i = 0; i < 2; i++) {
    WiFi.begin(ssid, password);  // Выполнить сетевое подключение

    delay(1000);
    Serial.println("");
    Serial.print("Connecting to ");
    Serial.println(ssid);

    long int StartTime = millis();
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      if ((StartTime + 5000) < millis()) break;  // Подождите 10 секунд для подключения
    }

    if (WiFi.status() == WL_CONNECTED) {                                                    // Если соединение установлено успешно
      WiFi.softAP((WiFi.localIP().toString() + "_" + (String)apssid).c_str(), appassword);  // Установите SSID для отображения IP-адреса клиента
      Serial.println("");
      Serial.println("STAIP address: ");
      Serial.println(WiFi.localIP());
      Serial.println("");

      for (int i = 0; i < 5; i++) {  // Если вы подключены к WIFI, установите быструю вспышку
        ledcWrite(4, 10);
        delay(200);
        ledcWrite(4, 0);
        delay(200);
      }
      break;
    }
  }

  if (WiFi.status() != WL_CONNECTED) {  // Если не удалось подключиться
    WiFi.softAP((WiFi.softAPIP().toString() + "_" + (String)apssid).c_str(), appassword);

    for (int i = 0; i < 2; i++) {  // Если не удается подключиться к WIFI, установите медленное мигание вспышки
      ledcWrite(4, 10);
      delay(1000);
      ledcWrite(4, 0);
      delay(1000);
    }
  }

  server.begin();
}

void loop() {
  streamImage();
  delay(50);
  Feedback = "";
  Command = "";
  cmd = "";
  P1 = "";
  P2 = "";
  P3 = "";
  P4 = "";
  P5 = "";
  P6 = "";
  P7 = "";
  P8 = "";
  P9 = "";
  ReceiveState = 0, cmdState = 1, strState = 1, questionstate = 0, equalstate = 0, semicolonstate = 0;

  client = server.available();

  if (client) {
    String currentLine = "";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();

        getCommand(c);  // Разбор символов, полученных из буфера, для получения параметров команды
        if (c == '\n') {
          if (currentLine.length() == 0) {

            if (cmd == "getstill") {  // Получить снимок экрана видео
              getStill();
            } else if (cmd == "status") {  // Получить статус видео
              status();
            } else {  // Получить главную страницу управления
              mainpage();
            }

            Feedback = "";
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        if ((currentLine.indexOf("/?") != -1) && (currentLine.indexOf(" HTTP") != -1)) {
          if (Command.indexOf("stop") != -1) {  // Если команда содержит ключевое слово stop, немедленно отключитесь
            client.println();
            client.println();
            client.stop();
          }
          currentLine = "";
          Feedback = "";
          ExecuteCommand();
        }
      }
    }
    delay(1);
    client.stop();
  }
}

void streamImage() {
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  if (fb->format == PIXFORMAT_JPEG) {
    // Отображаем на дисплее
    uint8_t *rgb565_buf = (uint8_t *)heap_caps_malloc(fb->width * fb->height * 2, MALLOC_CAP_SPIRAM | MALLOC_CAP_8BIT);
    if (rgb565_buf == NULL) {
      Serial.println("Failed to allocate memory for RGB565");
    } else {
      bool result = jpg2rgb565(fb->buf, fb->len, rgb565_buf, JPG_SCALE_NONE);
      if (result) {
        tft.fillScreen(TFT_BLACK);
        tft.setSwapBytes(true);
        tft.pushImage(0, 0, fb->width, fb->height, (uint16_t *)rgb565_buf);
      } else {
        Serial.println("Failed to decode JPEG");
      }
      heap_caps_free(rgb565_buf);
    }
  } else {
    Serial.println("Unsupported format (not JPEG)");
  }

  // ОТПРАВЛЯЕМ НА ВЕБ-СЕРВЕР (ЗАДЕРЖКА НА 50 мс ДЛЯ СТАБИЛЬНОСТИ)
  delay(50);
  sendImageToWeb(fb);

  esp_camera_fb_return(fb);
}

// Функция отправки изображения на веб
void sendImageToWeb(camera_fb_t *fb) {
  if (client.connected()) {
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: image/jpeg");
    client.println("Content-Length: " + String(fb->len));
    client.println();
    client.write(fb->buf, fb->len);
  }
}

void ExecuteCommand() {
  if (cmd != "getstill") {
    Serial.println("cmd= " + cmd + " ,P1= " + P1 + " ,P2= " + P2 + " ,P3= " + P3 + " ,P4= " + P4 + " ,P5= " + P5 + " ,P6= " + P6 + " ,P7= " + P7 + " ,P8= " + P8 + " ,P9= " + P9);
    Serial.println("");
  }

  // Пользовательский блок команд
  if (cmd == "your cmd") {
    // Вы можете сделать что угодно
  } else if (cmd == "ip") {  // Запрос APIP, STAIP
    Feedback += "<br>";
    Feedback += "STA IP: " + WiFi.localIP().toString();
  } else if (cmd == "mac") {  // Запрос MAC-адреса
    Feedback = "STA MAC: " + WiFi.macAddress();
  } else if (cmd == "restart") {  // Перезагрузить WIFI-соединение
    ESP.restart();
  } else if (cmd == "digitalwrite") {  // Цифровой выход
    ledcDetach(P1.toInt());
    pinMode(P1.toInt(), OUTPUT);
    digitalWrite(P1.toInt(), P2.toInt());
  } else if (cmd == "digitalread") {  // Цифровой вход
    Feedback = String(digitalRead(P1.toInt()));
  } else if (cmd == "analogwrite") {  // Аналоговый выход
    if (P1 == "4") {
      ledcAttach(4, 5000, 4);
      ledcWrite(4, P2.toInt());
    } else {
      ledcAttach(P1.toInt(), 9, 5000);
      ledcWrite(9, P2.toInt());
    }
  } else if (cmd == "analogread") {  // Аналоговое чтение
    Feedback = String(analogRead(P1.toInt()));
  } else if (cmd == "touchread") {  // Чтение касания
    Feedback = String(touchRead(P1.toInt()));
  } else if (cmd == "restart") {  // Перезапуск питания
    ESP.restart();
  } else if (cmd == "flash") {  // Вспышка
    ledcAttach(4, 5000, 4);
    int val = P1.toInt();
    ledcWrite(4, val);
  } else if (cmd == "servo") {
    static bool attached = false;  // Объявляем внутри функции
    int angle = P1.toInt();

    Serial.printf("Servo command received: angle=%d\n", angle);

    if (angle < 0 || angle > 180) {
      Serial.println("Invalid servo angle");
      return;
    }

    if (!attached) {
      myServo.attach(SERVO_PIN);  // Подключаем сервопривод только один раз
      attached = true;
      Serial.printf("Servo attached to pin %d\n", SERVO_PIN);
    }

    myServo.write(angle);  // Устанавливаем угол
    Serial.printf("Servo moved to %d degrees on pin %d\n", angle, SERVO_PIN);
  }


  else if (cmd == "relay") {  // Реле
    pinMode(P1.toInt(), OUTPUT);
    digitalWrite(P1.toInt(), P2.toInt());
  } else if (cmd == "uart") {  // UART
    Serial.print(P1);
  } else if (cmd == "resetwifi") {  // Перезагрузить сетевое подключение
    for (int i = 0; i < 2; i++) {
      WiFi.begin(P1.c_str(), P2.c_str());
      Serial.print("Connecting to ");
      Serial.println(P1);
      long int StartTime = millis();
      while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        if ((StartTime + 5000) < millis()) break;
      }
      Serial.println("");
      Serial.println("STAIP: " + WiFi.localIP().toString());
      Feedback = "STAIP: " + WiFi.localIP().toString();

      if (WiFi.status() == WL_CONNECTED) {
        WiFi.softAP((WiFi.localIP().toString() + "_" + P1).c_str(), P2.c_str());
        for (int i = 0; i < 2; i++) {  // Если не удается подключиться к WIFI, установите медленное мигание вспышки
          ledcWrite(4, 10);
          delay(300);
          ledcWrite(4, 0);
          delay(300);
        }
        break;
      }
    }
  } else if (cmd == "framesize") {
    int val = P1.toInt();
    sensor_t *s = esp_camera_sensor_get();
    s->set_framesize(s, (framesize_t)val);
  } else if (cmd == "quality") {  // Качество изображения
    sensor_t *s = esp_camera_sensor_get();
    s->set_quality(s, P1.toInt());
  } else if (cmd == "contrast") {  // Контрастность
    sensor_t *s = esp_camera_sensor_get();
    s->set_contrast(s, P1.toInt());
  } else if (cmd == "brightness") {  // Яркость
    sensor_t *s = esp_camera_sensor_get();
    s->set_brightness(s, P1.toInt());
  } else if (cmd == "saturation") {  // Насыщенность
    sensor_t *s = esp_camera_sensor_get();
    s->set_saturation(s, P1.toInt());
  } else if (cmd == "special_effect") {  // Спецэффекты
    sensor_t *s = esp_camera_sensor_get();
    s->set_special_effect(s, P1.toInt());
  } else if (cmd == "hmirror") {  // Горизонтальное зеркалирование
    sensor_t *s = esp_camera_sensor_get();
    s->set_hmirror(s, P1.toInt());
  } else if (cmd == "vflip") {  // Вертикальный переворот
    sensor_t *s = esp_camera_sensor_get();
    s->set_vflip(s, P1.toInt());
  } else {
    Feedback = "Command is not defined.";
  }
  if (Feedback == "") Feedback = Command;
}

// Разбор строки команды для помещения в переменную
void getCommand(char c) {
  if (c == '?') ReceiveState = 1;
  if ((c == ' ') || (c == '\r') || (c == '\n')) ReceiveState = 0;

  if (ReceiveState == 1) {
    Command = Command + String(c);

    if (c == '=') cmdState = 0;
    if (c == ';') strState++;

    if ((cmdState == 1) && ((c != '?') || (questionstate == 1))) cmd = cmd + String(c);
    if ((cmdState == 0) && (strState == 1) && ((c != '=') || (equalstate == 1))) P1 = P1 + String(c);
    if ((cmdState == 0) && (strState == 2) && (c != ';')) P2 = P2 + String(c);
    if ((cmdState == 0) && (strState == 3) && (c != ';')) P3 = P3 + String(c);
    if ((cmdState == 0) && (strState == 4) && (c != ';')) P4 = P4 + String(c);
    if ((cmdState == 0) && (strState == 5) && (c != ';')) P5 = P5 + String(c);
    if ((cmdState == 0) && (strState == 6) && (c != ';')) P6 = P6 + String(c);
    if ((cmdState == 0) && (strState == 7) && (c != ';')) P7 = P7 + String(c);
    if ((cmdState == 0) && (strState == 8) && (c != ';')) P8 = P8 + String(c);
    if ((cmdState == 0) && (strState >= 9) && ((c != ';') || (semicolonstate == 1))) P9 = P9 + String(c);

    if (c == '?') questionstate = 1;
    if (c == '=') equalstate = 1;
    if ((strState >= 9) && (c == ';')) semicolonstate = 1;
  }
}

// Пользовательский веб-интерфейс главной страницы управления
static const char PROGMEM INDEX_HTML[] = R"rawliteral(<!doctype html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width,initial-scale=1">
        <title>ESP32 OV2460</title>
        <style>
            body {
                font-family: Arial,Helvetica,sans-serif;
                background: #181818;
                color: #EFEFEF;
                font-size: 16px
            }
            h2 {
                font-size: 18px
            }
            section.main {
                display: flex
            }
            #menu,section.main {
                flex-direction: column
            }
            #menu {
                display: none;
                flex-wrap: nowrap;
                min-width: 340px;
                background: #363636;
                padding: 8px;
                border-radius: 4px;
                margin-top: -10px;
                margin-right: 10px;
            }
            #content {
                display: flex;
                flex-wrap: wrap;
                align-items: stretch
            }
            figure {
                padding: 0px;
                margin: 0;
                -webkit-margin-before: 0;
                margin-block-start: 0;
                -webkit-margin-after: 0;
                margin-block-end: 0;
                -webkit-margin-start: 0;
                margin-inline-start: 0;
                -webkit-margin-end: 0;
                margin-inline-end: 0
            }
            figure img {
                display: block;
                width: 100%;
                height: auto;
                border-radius: 4px;
                margin-top: 8px;
            }
            @media (min-width: 800px) and (orientation:landscape) {
                #content {
                    display:flex;
                    flex-wrap: nowrap;
                    align-items: stretch
                }
                figure img {
                    display: block;
                    max-width: 100%;
                    max-height: calc(100vh - 40px);
                    width: auto;
                    height: auto
                }
                figure {
                    padding: 0 0 0 0px;
                    margin: 0;
                    -webkit-margin-before: 0;
                    margin-block-start: 0;
                    -webkit-margin-after: 0;
                    margin-block-end: 0;
                    -webkit-margin-start: 0;
                    margin-inline-start: 0;
                    -webkit-margin-end: 0;
                    margin-inline-end: 0
                }
            }
            section#buttons {
                display: flex;
                flex-wrap: nowrap;
                justify-content: space-between
            }
            #nav-toggle {
                cursor: pointer;
                display: block
            }
            #nav-toggle-cb {
                outline: 0;
                opacity: 0;
                width: 0;
                height: 0
            }
            #nav-toggle-cb:checked+#menu {
                display: flex
            }
            .input-group {
                display: flex;
                flex-wrap: nowrap;
                line-height: 22px;
                margin: 5px 0
            }
            .input-group>label {
                display: inline-block;
                padding-right: 10px;
                min-width: 47%
            }
            .input-group input,.input-group select {
                flex-grow: 1
            }
            .range-max,.range-min {
                display: inline-block;
                padding: 0 5px
            }
            button {
                display: block;
                margin: 5px;
                padding: 0 12px;
                border: 0;
                line-height: 28px;
                cursor: pointer;
                color: #fff;
                background: #ff3034;
                border-radius: 5px;
                font-size: 16px;
                outline: 0
            }
            button:hover {
                background: #ff494d
            }
            button:active {
                background: #f21c21
            }
            button.disabled {
                cursor: default;
                background: #a0a0a0
            }
            input[type=range] {
                -webkit-appearance: none;
                width: 100%;
                height: 22px;
                background: #363636;
                cursor: pointer;
                margin: 0
            }
            input[type=range]:focus {
                outline: 0
            }
            input[type=range]::-webkit-slider-runnable-track {
                width: 100%;
                height: 2px;
                cursor: pointer;
                background: #EFEFEF;
                border-radius: 0;
                border: 0 solid #EFEFEF
            }
            input[type=range]::-webkit-slider-thumb {
                border: 1px solid rgba(0,0,30,0);
                height: 22px;
                width: 22px;
                border-radius: 50px;
                background: #ff3034;
                cursor: pointer;
                -webkit-appearance: none;
                margin-top: -11.5px
            }
            input[type=range]:focus::-webkit-slider-runnable-track {
                background: #EFEFEF
            }
            input[type=range]::-moz-range-track {
                width: 100%;
                height: 2px;
                cursor: pointer;
                background: #EFEFEF;
                border-radius: 0;
                border: 0 solid #EFEFEF
            }
            input[type=range]::-moz-range-thumb {
                border: 1px solid rgba(0,0,30,0);
                height: 22px;
                width: 22px;
                border-radius: 50px;
                background: #ff3034;
                cursor: pointer
            }
            input[type=range]::-ms-track {
                width: 100%;
                height: 2px;
                cursor: pointer;
                background: 0 0;
                border-color: transparent;
                color: transparent
            }
            input[type=range]::-ms-fill-lower {
                background: #EFEFEF;
                border: 0 solid #EFEFEF;
                border-radius: 0
            }
            input[type=range]::-ms-fill-upper {
                background: #EFEFEF;
                border: 0 solid #EFEFEF;
                border-radius: 0
            }
            input[type=range]::-ms-thumb {
                border: 1px solid rgba(0,0,30,0);
                height: 22px;
                width: 22px;
                border-radius: 50px;
                background: #ff3034;
                cursor: pointer;
                height: 2px
            }
            input[type=range]:focus::-ms-fill-lower {
                background: #EFEFEF
            }
            input[type=range]:focus::-ms-fill-upper {
                background: #363636
            }
            .switch {
                display: block;
                position: relative;
                line-height: 22px;
                font-size: 16px;
                height: 22px
            }
            .switch input {
                outline: 0;
                opacity: 0;
                width: 0;
                height: 0
            }
            .slider {
                width: 50px;
                height: 22px;
                border-radius: 22px;
                cursor: pointer;
                background-color: grey
            }
            .slider,.slider:before {
                display: inline-block;
                transition: .4s
            }
            .slider:before {
                position: relative;
                content: "";
                border-radius: 50%;
                height: 16px;
                width: 16px;
                left: 4px;
                top: 3px;
                background-color: #fff
            }
            input:checked+.slider {
                background-color: #ff3034
            }
            input:checked+.slider:before {
                -webkit-transform: translateX(26px);
                transform: translateX(26px)
            }
            select {
                border: 1px solid #363636;
                font-size: 14px;
                height: 22px;
                outline: 0;
                border-radius: 5px
            }
            .image-container {
                position: relative;
                min-width: 160px
            }
            .close {
                position: absolute;
                right: 5px;
                top: 5px;
                background: #ff3034;
                width: 16px;
                height: 16px;
                border-radius: 100px;
                color: #fff;
                text-align: center;
                line-height: 18px;
                cursor: pointer
            }
            .hidden {
                display: none
            }
        </style>
        <script src='https:\/\/fustyles.github.io/webduino/TensorFlow/Face-api/face-api.min.js'></script> 
    </head>
    <body>
    ESP32-CAM IP：<input type="text" id="ip" size="20" value="192.168.">&nbsp;&nbsp;<input type="button" value="Set" onclick="start();">    
        <figure>
            <div id="stream-container" class="image-container hidden">
              <div class="close" id="close-stream">×</div>
              <img id="stream" src="" style="display:none" >
              <canvas id="canvas" width="0" height="0"></canvas>
            </div>
        </figure>     
        <section class="main">
            <div id="logo">
                <label for="nav-toggle-cb" id="nav-toggle">&#9776;&nbsp;&nbsp;Toggle OV5640 settings</label>
            </div>
            <div id="content">
                <div id="sidebar">
                    <input type="checkbox" id="nav-toggle-cb" checked="checked">
                    <nav id="menu">
                        <section id="buttons">
                            <button id="restart">Restart board</button>
                            <button id="stop-still">Stop</button>
                            <button id="get-still">Get Still</button>
                            <button id="toggle-stream" style="display:none">Start Stream</button>                                                     
                        </section>
                        <div class="input-group" id="uart-group">
                            <label for="uart">Recognize face</label>
                            <div class="switch">
                                <input id="uart" type="checkbox" class="default-action" checked="checked">
                                <label class="slider" for="uart"></label>
                            </div>
                        </div>
                        <div class="input-group" id="distancelimit-group">
                            <label for="distancelimit">Distance Limit</label>
                            <div class="range-min">0</div>
                            <input type="range" id="distancelimit" min="0" max="1" value="0.6" step="0.1" class="default-action">
                            <div class="range-max">1</div>
                        </div>                                    
                        <div class="input-group" id="flash-group">
                            <label for="flash">Flash</label>
                            <div class="range-min">0</div>
                            <input type="range" id="flash" min="0" max="255" value="0" class="default-action">
                            <div class="range-max">255</div>
                        </div>
                        <div class="input-group" id="framesize-group">
                            <label for="framesize">Resolution</label>
                            <select id="framesize" class="default-action">
                                <option value="10">UXGA(1600x1200)</option>
                                <option value="9">SXGA(1280x1024)</option>
                                <option value="8">XGA(1024x768)</option>
                                <option value="7">SVGA(800x600)</option>
                                <option value="6">VGA(640x480)</option>
                                <option value="5" selected="selected">CIF(400x296)</option>
                                <option value="4">QVGA(320x240)</option>
                                <option value="3">HQVGA(240x176)</option>
                                <option value="0">QQVGA(160x120)</option>
                            </select>
                        </div>
                        <div class="input-group" id="quality-group">
                            <label for="quality">Quality</label>
                            <div class="range-min">10</div>
                            <input type="range" id="quality" min="10" max="63" value="10" class="default-action">
                            <div class="range-max">63</div>
                        </div>
                        <div class="input-group" id="brightness-group">
                            <label for="brightness">Brightness</label>
                            <div class="range-min">-2</div>
                            <input type="range" id="brightness" min="-2" max="2" value="0" class="default-action">
                            <div class="range-max">2</div>
                        </div>
                        <div class="input-group" id="contrast-group">
                            <label for="contrast">Contrast</label>
                            <div class="range-min">-2</div>
                            <input type="range" id="contrast" min="-2" max="2" value="0" class="default-action">
                            <div class="range-max">2</div>
                        </div>
                        <div class="input-group" id="saturation-group">
                            <label for="saturation">Saturation</label>
                            <div class="range-min">-2</div>
                            <input type="range" id="saturation" min="-2" max="2" value="0" class="default-action">
                            <div class="range-max">2</div>
                        </div>
                        <div class="input-group" id="special_effect-group">
                            <label for="special_effect">Special Effect</label>
                            <select id="special_effect" class="default-action">
                                <option value="0" selected="selected">No Effect</option>
                                <option value="1">Negative</option>
                                <option value="2">Grayscale</option>
                                <option value="3">Red Tint</option>
                                <option value="4">Green Tint</option>
                                <option value="5">Blue Tint</option>
                                <option value="6">Sepia</option>
                            </select>
                        </div>
                        <div class="input-group" id="hmirror-group">
                            <label for="hmirror">H-Mirror</label>
                            <div class="switch">
                                <input id="hmirror" type="checkbox" class="default-action" checked="checked">
                                <label class="slider" for="hmirror"></label>
                            </div>
                        </div>
                        <div class="input-group" id="vflip-group">
                            <label for="vflip">V-Flip</label>
                            <div class="switch">
                                <input id="vflip" type="checkbox" class="default-action" checked="checked">
                                <label class="slider" for="vflip"></label>
                            </div>
                        </div>
                        <div class="input-group" id="servo-group">
                            <label for="servo">Servo</label>
                            <div class="range-min">0</div>
                            <input type="range" id="servo" min="0" max="180" value="90" class="default-action">
                            <div class="range-max">180</div>
                            <select id="pinServo" width="30"><option value="16" selected>IO16</option><option value="12">IO12</option><option value="13">IO13</option><option value="14">IO14</option><option value="15">IO15</option></select>
                        </div>
                        <div class="input-group" id="relay-group">
                            <label for="relay">Relay</label>
                            <div class="switch">
                                <input id="relay" type="checkbox" class="default-action" checked="checked">
                                <label class="slider" for="relay"></label>
                            </div>
                            <select id="pinRelay" width="30"><option value="2">IO2</option><option value="12">IO12</option><option value="13" selected>IO13</option><option value="14">IO14</option><option value="15">IO15</option></select>
                        </div>                         
                    </nav>
                </div>
            </div>
        </section>
        Result：<input type="checkbox" id="chkResult" checked>
        <div id="message" style="color:red">Please wait for loading model.<div>
                
        <script>
        // Распознавание изображений
        const aiView = document.getElementById('stream')
        const aiStill = document.getElementById('get-still')
        const canvas = document.getElementById('canvas')     
        var context = canvas.getContext("2d");  
        const message = document.getElementById('message');
        const uart = document.getElementById('uart');
        const chkResult = document.getElementById('chkResult');
        const distancelimit = document.getElementById('distancelimit')
        var res = "";

        // Модель: https://github.com/fustyles/webduino/tree/master/TensorFlow/Face-api
        const faceImagesPath = 'https://MartisHack.github.io/faces/';     // Путь к папке с названиями людей
        const faceLabels = ['mrbeast'];     // Список папок с названиями людей
        faceImagesCount = 2 ;                            // Количество фотографий в папке, названной по имени каждого человека, JPG-файлы с последовательной нумерацией 1.jpg, 2.jpg...
        
        const modelPath = 'https://fustyles.github.io/webduino/TensorFlow/Face-api/';
        let displaySize = { width:320, height: 240 }
        let labeledFaceDescriptors;
        let faceMatcher; 
        
        Promise.all([
          faceapi.nets.faceLandmark68Net.load(modelPath),
          faceapi.nets.faceRecognitionNet.load(modelPath),
          faceapi.nets.ssdMobilenetv1.load(modelPath)      
        ]).then(function(){
          message.innerHTML = "";
          aiStill.click();
        })   
        
        async function DetectImage() {
          canvas.setAttribute("width", aiView.width);
          canvas.setAttribute("height", aiView.height); 
          context.drawImage(aiView,0,0,canvas.width,canvas.height);
          if (!chkResult.checked) message.innerHTML = "";
                      
          if (!labeledFaceDescriptors) {
            message.innerHTML = "Loading face images...";      
            labeledFaceDescriptors = await loadLabeledImages();
            message.innerHTML = "";
          }
                      
          if (uart.checked) {
            let displaySize = { width:canvas.width, height: canvas.height }
      
            faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, Number(distancelimit.value))  // Предел расстояния. Если оно превышено, отображается "unknow", иначе отображается имя.
            const detections = await faceapi.detectAllFaces(canvas).withFaceLandmarks().withFaceDescriptors();
            const resizedDetections = faceapi.resizeResults(detections, displaySize);
      
            const results = resizedDetections.map(d => faceMatcher.findBestMatch(d.descriptor));
            
            if (chkResult.checked) message.innerHTML = JSON.stringify(results);
            
            res = "";
            results.forEach((result, i) => {
              if (uart.checked) {
                // Когда лицо распознано
                var query = document.location.origin + '?uart=' + result.label;
                fetch(query)
                .then(response => {
                  console.log(`Request to ${query} finished, status: ${response.status}`);
                  });
                  
                  // Определяем угол сервопривода в зависимости от распознанного лица
                  let servoPin = document.getElementById("pinServo").value;
                  let servoAngle = 90; // Угол по умолчанию (среднее положение)
                  
                  if (result.label === "mrbeast") {
                    servoAngle = 180; // Устанавливаем 180° для MrBeast
                  } else if (result.label === "unknown") {
                    servoAngle = 0; // Для неизвестных - 0°
                  }
                  
                  // Отправляем команду сервоприводу
                  let servoQuery = document.location.origin + `?servo=${servoPin};${servoAngle}`;
                  console.log("Sending servo command: ", servoQuery);
                  
                  fetch(servoQuery)
                  .then(response => response.text())
                  .then(data => console.log("Servo response: ", data))
                  .catch(error => console.error("Servo command error: ", error));
              }
              
              res += i + "," + result.label + "," + result.distance + "<br>";

              const box = resizedDetections[i].detection.box;
              var drawBox = new faceapi.draw.DrawBox(box, { label: result.toString() });
              drawBox.draw(canvas);
            });
              
              uart.checked = true;  // Поскольку каждое распознавание занимает немного памяти, распознавание приостанавливается после завершения распознавания.
              if (chkResult.checked) message.innerHTML = res;            
          }
          aiStill.click();
        }

        function loadLabeledImages() {
          return Promise.all(
            faceLabels.map(async label => {
              const descriptions = []
              for (let i=1;i<=faceImagesCount;i++) {
                const img = await faceapi.fetchImage(faceImagesPath+label+'/'+i+'.jpg')
                const detections = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor();
                descriptions.push(detections.descriptor)
              }
              return new faceapi.LabeledFaceDescriptors(label, descriptions)
            })
          )
        }        
        
        aiView.onload = function (event) {
          try { 
            document.createEvent("TouchEvent");
            setTimeout(function(){DetectImage();},250);
          } catch(e) { 
            setTimeout(function(){DetectImage();},150);
          } 
        }
        
        // Официальная функция
        function start() {
          var baseHost = 'http://'+document.getElementById("ip").value;  // var baseHost = document.location.origin
   
          const hide = el => {
            el.classList.add('hidden')
          }
          
          const show = el => {
            el.classList.remove('hidden')
          }
        
          const disable = el => {
            el.classList.add('disabled')
            el.disabled = true
          }
        
          const enable = el => {
            el.classList.remove('disabled')
            el.disabled = false
          }
        
          const updateValue = (el, value, updateRemote) => {
            updateRemote = updateRemote == null ? true : updateRemote
            let initialValue
            if(!el) return;
            if (el.type === 'checkbox') {
              initialValue = el.checked
              value = !!value
              el.checked = value
            } else {
              initialValue = el.value
              el.value = value
            }
        
            if (updateRemote && initialValue !== value) {
              updateConfig(el);
            } 
          }
        
          function updateConfig (el) {
            let value
            switch (el.type) {
              case 'checkbox':
                value = el.checked ? 1 : 0
                break
              case 'range':
              case 'select-one':
                value = el.value
                break
              case 'button':
              case 'submit':
                value = '1'
                break
              default:
                return
            }
        
            if (el.id =="flash") {  // Добавить пользовательскую команду flash
              var query = baseHost+"?flash=" + String(value);
            } else if (el.id =="servo") {  // Добавить пользовательскую команду servo
              var query = baseHost+"?servo=" + pinServo.value + ";" + String(value);
            } else if (el.id =="relay") {  // Добавить пользовательскую команду relay
              var query = baseHost+"?relay=" + pinRelay.value + ";" + Number(relay.checked);
            } else if (el.id =="uart") {  // Добавить пользовательскую команду uart
              return;     
            } else if (el.id =="distancelimit") {  // Добавить пользовательскую команду distancelimit
              return;                           
            } else {
              var query = `${baseHost}/?${el.id}=${value}`
            }
        
            fetch(query)
              .then(response => {
                console.log(`request to ${query} finished, status: ${response.status}`)
              })
          }
        
          document
            .querySelectorAll('.close')
            .forEach(el => {
              el.onclick = () => {
                hide(el.parentNode)
              }
            })
        
          const view = document.getElementById('stream')
          const viewContainer = document.getElementById('stream-container')
          const stillButton = document.getElementById('get-still')
          const enrollButton = document.getElementById('face_enroll')
          const closeButton = document.getElementById('close-stream')
          const stopButton = document.getElementById('stop-still')            // Добавлена переменная stopButton
          const restartButton = document.getElementById('restart')            // Добавлена переменная restart
          const flash = document.getElementById('flash')                      // Добавлена переменная flash
          const servo = document.getElementById('servo')                      // Добавлена переменная servo
          const pinServo = document.getElementById('pinServo');               // Добавлена переменная pin servo
          const relay = document.getElementById('relay')                      // Добавлена переменная relay
          const pinRelay = document.getElementById('pinRelay');               // Добавлена переменная pinRelay          
          const uart = document.getElementById('uart')                        // Добавлена переменная uart
          var myTimer;
          var restartCount=0;    
          var streamState = false;
          
          stopButton.onclick = function (event) {   
            window.stop();
            message.innerHTML = "";
          }    
           
          // Привязка действий к кнопкам
          stillButton.onclick = () => {
            view.src = `${baseHost}/?getstill=${Date.now()}`
            show(viewContainer);     
          }
          
          closeButton.onclick = () => {
            hide(viewContainer)
          }
          
          // Добавлено событие нажатия кнопки перезапуска питания (пользовательский формат команды: http://192.168.xxx.xxx/?cmd=P1;P2;P3;P4;P5;P6;P7;P8;P9)
          restartButton.onclick = () => {
            fetch(baseHost+"/?restart");
          }    
                
          // Привязка действия по умолчанию при изменении
          document
            .querySelectorAll('.default-action')
            .forEach(el => {
              el.onchange = () => updateConfig(el)
            })
        
          framesize.onchange = () => {
            updateConfig(framesize)
          }
          
          // Чтение начальных значений  
          fetch(`${baseHost}/?status`)
          .then(function (response) {
            return response.json()
          })
          .then(function (state) {
            document
            .querySelectorAll('.default-action')
            .forEach(el => {
              if (el.id=="flash") {  // Добавлено: установить значение flash по умолчанию равным 0
                flash.value=0;
                var query = baseHost+"?flash=0";
                fetch(query)
                  .then(response => {
                    console.log(`request to ${query} finished, status: ${response.status}`)
                  })
              } else if (el.id=="servo") {  // Добавлено: установить значение servo по умолчанию равным 90 градусам
                servo.value=90;
              } else if (el.id=="relay") {  // Добавлено: установить значение relay по умолчанию равным 0
                relay.checked = false;
              } else if (el.id=="uart") {  // Добавлено: установить значение uart по умолчанию равным 0
                uart.checked = false;
              } else if (el.id=="distancelimit") {  // Добавлено: установить значение distancelimit по умолчанию равным 0.6
                distancelimit.value = 0.6;                                  
              } else {    
                updateValue(el, state[el.id], false)
              }
            })
          })
        }
        
        // URL/?192.168.1.38 может автоматически подставлять значение IP-адреса после знака "?"
        var href=location.href;
        if (href.indexOf("?")!=-1) {
          ip.value = location.search.split("?")[1].replace(/http:\/\//g,"");
          start();
        }
        else if (href.indexOf("http")!=-1) {
          ip.value = location.host;
          start();
        }
          
    </script>        
    </body>
</html>
)rawliteral";

// Возврат статуса видео
void status() {
  sensor_t *s = esp_camera_sensor_get();
  String json = "{";
  json += "\"framesize\":" + String(s->status.framesize) + ",";
  json += "\"quality\":" + String(s->status.quality) + ",";
  json += "\"brightness\":" + String(s->status.brightness) + ",";
  json += "\"contrast\":" + String(s->status.contrast) + ",";
  json += "\"saturation\":" + String(s->status.saturation) + ",";
  json += "\"special_effect\":" + String(s->status.special_effect) + ",";
  json += "\"vflip\":" + String(s->status.vflip) + ",";
  json += "\"hmirror\":" + String(s->status.hmirror);
  json += "}";

  client.println("HTTP/1.1 200 OK");
  client.println("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept");
  client.println("Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS");
  client.println("Content-Type: application/json; charset=utf-8");
  client.println("Access-Control-Allow-Origin: *");
  client.println("Connection: close");
  client.println();

  for (int Index = 0; Index < json.length(); Index = Index + 1024) {
    client.print(json.substring(Index, Index + 1024));
  }
}

void mainpage() {
  // Возврат HTML-страницы или Feedback
  client.println("HTTP/1.1 200 OK");
  client.println("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept");
  client.println("Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS");
  client.println("Content-Type: text/html; charset=utf-8");
  client.println("Access-Control-Allow-Origin: *");
  client.println("Connection: close");
  client.println();

  String Data = "";
  if (cmd != "")
    Data = Feedback;
  else
    Data = String((const char *)INDEX_HTML);

  for (int Index = 0; Index < Data.length(); Index = Index + 1024) {
    client.print(Data.substring(Index, Index + 1024));
  }
}

void getStill() {
  // Возврат изображения в формате JPEG
  camera_fb_t *fb = NULL;
  fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    delay(1000);
    ESP.restart();
  }

  client.println("HTTP/1.1 200 OK");
  client.println("Access-Control-Allow-Origin: *");
  client.println("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept");
  client.println("Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS");
  client.println("Content-Type: image/jpeg");
  client.println("Content-Disposition: form-data; name=\"imageFile\"; filename=\"picture.jpg\"");
  client.println("Content-Length: " + String(fb->len));
  client.println("Connection: close");
  client.println();

  uint8_t *fbBuf = fb->buf;
  size_t fbLen = fb->len;
  for (size_t n = 0; n < fbLen; n = n + 1024) {
    if (n + 1024 < fbLen) {
      client.write(fbBuf, 1024);
      fbBuf += 1024;
    } else if (fbLen % 1024 > 0) {
      size_t remainder = fbLen % 1024;
      client.write(fbBuf, remainder);
    }
  }

  esp_camera_fb_return(fb);

  pinMode(4, OUTPUT);
  digitalWrite(4, LOW);
}
